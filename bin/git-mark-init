#!/usr/bin/env node

// USAGE: git-mark [privkeyhex] [$(git rev-parse HEAD)]

// IMPORTS
const bitcoin = require('bitcoinjs-lib')
const tiny = require('tiny-secp256k1')
const argv = require('minimist')(process.argv.slice(2))
const gitlog = require('gitlog').default
const fs = require('fs')
const homedir = require('os').homedir()
const exec = require('child_process').exec
const $ = require('child_process').execSync
const execSync = require('child_process').execSync
const package = require('../package.json')

// MODEL
// default privkey = brain for urn:json:bitmark
globalThis.data = {
  address: null,
  sshkey: '$HOME/.ssh/id_rsa',
  salt: null,
  secret: null,
  genesistxo: null,
  faucet: 'http://faucet.gitmark.me/'
}

// FUNCTIONS
function getConfig(key) {
  try {
    var cmd = `git config ${key}`
    var secret = execSync(cmd)?.toString()?.replace('\n', '')
    return secret
  } catch (e) {
  }
}

function init(str) {
  return argv[str] || getConfig('gitmark.' + str) || data[str]
}

// INIT
let NETWORK = require('../lib/networks.js').BITMARK
if (process.env.NETWORK) {
  NETWORK = require('../lib/networks.js')[process.env.NETWORK] || NETWORK
}
console.log('NETWORK', NETWORK)

data.address = init('address')
data.sshkey = init('sshkey')
data.salt = init('salt')
data.secret = init('secret')
data.genesistxo = init('genesistxo')
data.faucet = init('faucet')


console.log('data', data)

// MAIN
// check if already init
console.log('checking if init already')
// how
// config
// gitmark.json
// commits

function getNewSecret() {
  try {
    var sshkey = `$HOME/.ssh/id_rsa`
    var cmd = `pwd | ssh-keygen -Y sign -f ${sshkey} -n gitmark - | sha256sum | head -c 64`
    var newSecret = $(cmd).toString()
    return newSecret
  } catch {

  }
}

// get secret
// generate secret if none
if (!data.secret) {
  console.log('no secret found')
  var newsecret = getNewSecret()
  console.log('newsecret', newsecret)
  data.secret = newsecret


  // var gen = $(`git config gitmark.secret $(git config--get remote.origin.url | ssh - keygen - Y sign - f ~/.ssh/id_rsa - n gitmark - | sha256sum | head - c 40)`)
  // console.log(gen)

}

console.log('using secret', data.secret)

// generate address from secret
const POINT = Buffer.from(data.secret, 'hex')
var keyPair1 = bitcoin.ECPair.fromPrivateKey(POINT)
console.log('public keys hex buffer')
console.log(keyPair1.publicKey)
console.log('private keys hex')
var { address } = bitcoin.payments.p2pkh({
  pubkey: keyPair1.publicKey,
  network: NETWORK
})
console.log('pubkey address computed from private', address)

// todo: put all in config, if not there, check
console.log('run')
console.log(`git config gitmark.secret ${data.secret}`)
console.log(`git config gitmark.address ${address}`)
console.log(`git config gitmark.sshkey ${data.sshkey}`)
console.log(`git config gitmark.salt pwd`)
console.log(`git config gitmark.faucet ${data.faucet}`)


// get faucet
console.log('faucet', data.faucet)

// add to faucet
console.log('type', address, 'into', data.faucet, 'and wait for tx to get in a block or try')
console.log(`curl ${data.faucet}/?address=${address}`)
console.log(`curl ${data.faucet}/webcredits/webledger.json`)

// todo get tx value
var cmd = `sleep 0.4 ; curl ${data.faucet}/webcredits/webledger.json`
var ledger = JSON.parse($(cmd).toString())
console.log(ledger)

// todo print to screen
function findValueByPrefix(object, prefix) {
  for (var property in object) {
    if (object.hasOwnProperty(property) &&
      property.toString().startsWith(prefix)) {
      return property.split(':')[1];
    }
  }
}

var tx = findValueByPrefix(ledger, "txo:");
console.log('tx', tx)

// create gitmark.json
console.log('create gitmark.json and check in files')
console.log(`{
  "@id": "gitmark:${tx}:0",
  "genesis": "gitmark:${tx}:0",
  "nick": "gitmark",
  "package": "./package.json",
  "repository": "./"
}`)


// git mark genesis
console.log('git mark --genesis ', tx)
