#!/usr/bin/env node

// USAGE: git-mark-list

// IMPORTS
const gitlog = require('gitlog').default
var bitcoin = require('bitcoinjs-lib')
var argv = require('minimist')(process.argv.slice(2))
const fs = require('fs')
const homedir = require('os').homedir()
const sha256 = require('sha256')
// const Buffer = require('safe-buffer').Buffer;
const schnorr = require('bip-schnorr')

// MODEL
// default privkey = brain for urn:json:bitmark
globalThis.data = {
  privkey: '132e7465a63e30a74c5b0deae3573033319e9de18a84878613eaa21878b2b56b'
}

// console.log('data', data)

// FUNCTIONS
const BITMARK = {
  messagePrefix: '\x19BITMARK Signed Message:\n',
  bech32: 'btm',
  bip32: {
    public: 0x019da462,
    private: 0x019d9cfe
  },
  pubKeyHash: 85,
  wif: 213,
  scriptHash: 0x32
}

const options = {
  repo: './',
  fields: ['subject', 'authorName', 'authorDate'],
  execOptions: { maxBuffer: 1000 * 1024 },
  number: 1000000,
  fields: ['hash', 'subject', 'authorDate']
}

function addCryptoToCommit(commit) {
  // console.log('commit', commit)
  if (!commit.hash) return
  b2 = BigInt('0x' + commit.hash)
  b3 = BigInt.asUintN(256, b1 + b2)
  commit.privkey = b1.toString(16)
  commit.tweakedkey = b3.toString(16)
  // console.log('original private key', b3.toString(16))
  // console.log('tweaked private key', b3.toString(16))
  var keyPair1 = bitcoin.ECPair.fromPrivateKey(
    Buffer.from(b1.toString(16), 'hex'),
    { network: BITMARK }
  )
  commit.wifkey = keyPair1.toWIF()

  function buf2hex(buffer) {
    // buffer is an ArrayBuffer
    return [...new Uint8Array(buffer)]
      .map(x => x.toString(16).padStart(2, '0'))
      .join('')
  }

  commit.pubkey = buf2hex(keyPair1.publicKey).substring(2)
  // console.log('private key WIF:', keyPair1.toWIF())

  var { address } = bitcoin.payments.p2pkh({
    pubkey: keyPair1.publicKey,
    network: BITMARK
  })
  commit.address = address
  // console.log('verify address computed from private key:', address)

  commit.verify = `https://gitmark.info/${commit.subject.split(/[: ]/)[1]}`

  return commit

}


function renderCommit(commit, type) {
  if (!commit) return
  if (type === 'nostr') {
    var canon = [0, commit.pubkey, commit.authorDate, 17, [], commit.hash]

    canon = JSON.stringify(canon)
    var id = sha256(canon)

    // console.log(canon)

    // sign
    const KIND_CODE = 17

    const privateKeyHex = commit.privkey
    const message = Buffer.from(id, 'hex')

    const sig = schnorr.sign(privateKeyHex, message).toString('hex')

    // console.log(sig)
    // var sig = 1

    var event = `["EVENT",{"id":"${id}","pubkey":"${commit.pubkey}","created_at":${commit.authorDate},"kind":${KIND_CODE},"tags":[],"content":"${commit.hash}","sig":"${sig}"}]`

    console.log(event)
  } else {
    console.log(commit)
  }
}


function getPrivKey() {
  try {
    const fetchHeadDir = './.git/'
    var fetchHeadFile = fetchHeadDir + 'FETCH_HEAD'

    var fetchHead = fs.readFileSync(fetchHeadFile).toString()

    var repo = fetchHead
      .split(' ')
      .pop()
      .replace(':', '/')
      .replace('\n', '')

    const gitmarkRepoBase = homedir + '/.gitmark/repo'

    const gitmarkFile = gitmarkRepoBase + '/' + repo + '/gitmark.json'

    return require(gitmarkFile).privkey
  } catch {
    return undefined
  }
}

// INIT
data.privkey = argv._[0] || getPrivKey() || data.privkey
data.count = argv.count

var POINT = Buffer.from(data.privkey, 'hex')

var OFFSET = Buffer.from('000000000000000000000000' + data.hash, 'hex')

// MAIN
// priv keys
var b1 = BigInt('0x' + data.privkey)
var b2
var b3
// var keyPair1 = bitcoin.ECPair.fromPrivateKey(POINT)
// var pubkey = keypair.publicKey


// genesis
var genesis = require('../gitmark.json')
var genesisCommit = {
  "pubkey": genesis.pubkey,
  "hash": "genesis",
  "authorDate": genesis.created_at,
  "privkey": b1.toString(16)
}
// console.log('genesis', genesis)
// console.log('genesisCommit', genesisCommit)
if (!data.count) {
  renderCommit(genesisCommit, 'nostr')
}

// get commits
const commits = gitlog(options)
if (commits.length === 1) {
  console.log('Set up new repository with a gitmark')
  process.exit()
}



// traverse backwards
// console.log('Genesis tx need not be verified\n')
var done = 0
var gitmarks = []
for (var i = commits.length - 1; i >= 0; i--) {

  if (commits[i].subject.match(/^gitmark[: ][A-Fa-f0-9]/)) {

    var commit = {
      hash: commits[i + 1]?.hash,
      subject: commits[i].subject,
      authorDate: Math.floor(new Date(commits[i].authorDate).getTime() / 1000),
      privkey: b1.toString(16)
    }
    commit = addCryptoToCommit(commit)
    // console.log(commit)
    gitmarks.push(commit)

  }
}


gitmarks = gitmarks.reverse()
var len = data.count || gitmarks.length
for (var i = 0; i < len; i++) {
  // console.log(gitmarks[i])
  renderCommit(gitmarks[i], 'nostr')
}