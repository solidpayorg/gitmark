#!/usr/bin/env node

// USAGE: git-mark [privkeyhex] [$(git rev-parse HEAD)]

// IMPORTS
const bitcoin = require('bitcoinjs-lib')
const tiny = require('tiny-secp256k1')
const argv = require('minimist')(process.argv.slice(2))
const gitlog = require('gitlog').default
const fs = require('fs')
const homedir = require('os').homedir()
const $ = require('child_process').execSync
const execSync = require('child_process').execSync

// MODEL
// default privkey = brain for urn:json:bitmark
globalThis.data = {
  privkey: '132e7465a63e30a74c5b0deae3573033319e9de18a84878613eaa21878b2b56b',
  hash: 'b3e8f5735849af7f18a13ead08532043a7f82153',
  genesis: null,
  branch: 'gh-pages',
  notify: 'http://gitmark.me:4444'
}

// FUNCTIONS
function getConfig(key) {
  try {
    var cmd = `git config ${key}`
    var secret = execSync(cmd)
      ?.toString()
      ?.replace('\n', '')
    return secret
  } catch (e) { }
}

const options = {
  repo: './',
  fields: ['subject', 'authorName', 'authorDate'],
  execOptions: { maxBuffer: 1000 * 1024 },
  number: 1000,
  fields: ['hash', 'subject']
}

function getPrivKey() {
  try {
    const fetchHeadDir = './.git/'
    var fetchHeadFile = fetchHeadDir + 'FETCH_HEAD'

    var fetchHead = fs.readFileSync(fetchHeadFile).toString()

    var repo = fetchHead
      .split(' ')
      .pop()
      .replace(':', '/')
      .replace('\n', '')

    const gitmarkRepoBase = homedir + '/.gitmark/repo'

    const gitmarkFile = gitmarkRepoBase + '/' + repo + '/gitmark.json'

    return require(gitmarkFile).privkey
  } catch (e) {
    const fetchHeadDir = './.git/'
    var fetchHeadFile = fetchHeadDir + 'FETCH_HEAD'

    var fetchHead = fs.readFileSync(fetchHeadFile).toString()

    var repo = fetchHead
      .split(' ')
      .pop()
      .replace(':', '/')
      .replace('\n', '')

    const gitmarkRepoBase = homedir + '/.gitmark/repo'

    const gitmarkFile = gitmarkRepoBase + '/' + repo + '/gitmark.json'

    console.log('no priv key found in', gitmarkFile)
    return undefined
  }
}

// INIT
try {
  var secret = execSync('git config gitmark.secret')
    ?.toString()
    ?.replace('\n', '')
} catch (e) {
  console.error(e)
  console.error('did not find secret in config')
}

let NETWORK = require('../lib/networks.js').BITMARK
if (process.env.NETWORK) {
  NETWORK = require('../lib/networks.js')[process.env.NETWORK] || NETWORK
}
console.log('NETWORK', NETWORK)

const commits = gitlog(options)
var head = commits[0].hash
console.log('current head', head)

data.privkey = argv._[0] || secret || getPrivKey() || data.privkey
data.hash = argv._[1] || head || data.hash
data.genesis = argv.genesis || data.genesis

console.log('data', data)

var lastCommit = commits.filter(i => {
  return i.subject.match(/^gitmark/)
})
if (lastCommit && lastCommit[0] && lastCommit[0].subject) {
  lastCommit = lastCommit[0].subject
  lastCommit = lastCommit.split(' ').pop()
  lastCommit = lastCommit.split(':')
  console.log('lastCommit', lastCommit)
} else {
  console.log('New repo, set up first gitmark')
  console.log('Add private key')
  console.log('Fund genesis tx with genesis hash')
  console.log('Add --gensis and run')
  lastCommit = data.genesis.split(':')
  console.log('data.genesis', data.genesis)
  if (!data.genesis) {
    process.exit(-1)
  }
}

const POINT = Buffer.from(data.privkey, 'hex')

const OFFSET = Buffer.from('000000000000000000000000' + data.hash, 'hex')

// MAIN
function findLastCommitHash() {
  var i
  for (i = 0; i < commits.length; i++) {
    if (commits[i].subject.match(/^gitmark/)) break
  }
  if (i === commits.length) {
    return head
  } else {
    return commits[i + 1].hash
  }
}
var lastCommitHash = findLastCommitHash()
console.log('lastCommitHash', lastCommitHash)

// priv keys
const b1 = BigInt('0x' + data.privkey)
const b2 = BigInt('0x' + data.hash)
const b3 = BigInt.asUintN(256, b1 + b2)
const b4 = BigInt('0x' + lastCommitHash)
const b5 = BigInt.asUintN(256, b1 + b4)

// pub keys
var keyPair1 = bitcoin.ECPair.fromPrivateKey(POINT)
var keyPair2 = bitcoin.ECPair.fromPrivateKey(OFFSET)
var keyPair3 = bitcoin.ECPair.fromPrivateKey(
  Buffer.from(b3.toString(16).padStart(64, 0), 'hex')
)

// add pub keys together
const SUM = tiny.pointAdd(keyPair1.publicKey, keyPair2.publicKey)

// print pub keys
console.log('public keys hex buffer')
console.log(keyPair1.publicKey)
console.log(keyPair2.publicKey)
console.log(SUM)

// print priv keys
console.log('private keys hex')
console.log(b1.toString(16))
console.log(b2.toString(16))
console.log(b3.toString(16))
console.log(b4.toString(16))
console.log(b5.toString(16))

// address from priv key addition
var { address } = bitcoin.payments.p2pkh({
  pubkey: keyPair3.publicKey,
  network: NETWORK
})
console.log('address computed from private', address)

// address from pub key addition
var { address } = bitcoin.payments.p2pkh({
  pubkey: SUM,
  network: NETWORK
})
console.log('address computed from public', address)

var tx
const gitmarkTxBase = homedir + '/.gitmark/tx'

try {
  if (data.genesis) {
    tx = { total_output: '1', fees: '0.00001' }
  } else {
    tx = require(gitmarkTxBase + '/' + lastCommit[0] + '.json')
    if (!tx.total_output) tx.total_output = tx.vout[0].value
  }
} catch (e) {
  console.error(e)
  console.error(
    'error: need tx: ' +
    lastCommit[0] +
    'in ' +
    gitmarkTxBase +
    '/' +
    lastCommit[0] +
    '.json'
  )
  console.log('trying:')
  var explorerURI =
    $('git config gitmark.explorer || true')
      .toString()
      ?.replace('\n', '') ||
    'https://chainz.cryptoid.info/marks/api.dws?q=txinfo&t='

  explorerURI = 'http://gitmark.me/'
  var command = `curl "${explorerURI}${lastCommit[0]}.json" > ${gitmarkTxBase}/${lastCommit[0]}.json`
  console.log(command)
  $(command)
  tx = JSON.parse(
    fs.readFileSync(gitmarkTxBase + '/' + lastCommit[0] + '.json').toString()
  )
  if (!tx.total_output) tx.total_output = tx.vout[0].value
  // console.log('tx', tx)
  // console.log('do not run more than once per 10s')
  // process.exit(-1)
}

var fee = tx?.fees || 0.00001
var nextfee = tx.total_output - fee
nextfee = Math.round((nextfee + Number.EPSILON) * 100000000) / 100000000

var priv = data.genesis ? b1 : b5
var keyPair1 = bitcoin.ECPair.fromPrivateKey(
  Buffer.from(priv.toString(16).padStart(64, 0), 'hex'),
  { network: NETWORK }
)
console.log('private key WIF:', keyPair1.toWIF())

console.log('last commit hash', lastCommit.hash)

console.log(nextfee)
console.log('console commands')
// console.log(
//   'createrawtransaction',
//   lastCommit[0],
//   lastCommit[1],
//   address,
//   nextfee
// )
lastCommit[1] = lastCommit[1] || 0
console.log(
  `createrawtransaction '[{"txid": "${lastCommit[0]}", "vout": ${lastCommit[1]}}]' '{"${address}": ${nextfee}}'`
)
var hex = `1234`
// console.log('signrawtransaction', keyPair1.toWIF())
console.log(`signrawtransaction ${hex} null '["${keyPair1.toWIF()}"]'`)
console.log('sendrawtransaction')

var txexe = getConfig('gitmark.txexe')
var txcommand = `bin/tx.sh ${lastCommit[0]} ${lastCommit[1]
  } ${address} ${nextfee} ${keyPair1.toWIF()}`
console.log(txcommand)

if (txexe && argv.send) {
  console.log('auto send tx detected ... trying:')
  var newtx = $(txexe + ' ' + txcommand).toString().replace('\n', '')
  console.log('newtx', newtx?.toString(), 'length', newtx?.toString().length)

  console.log(
    'git commit --allow-empty -m' + ' "gitmark ' + newtx.toString() + '"'
  )
  console.log(`git push origin ${data.branch}`)

  if (argv.commit && newtx.toString().length === 64) {
    console.log('committing')
    $('git commit --allow-empty -m' + ' "gitmark ' + newtx.toString() + '"')
    $(`git push origin ${data.branch}`)

    if (argv.notify) {
      $(`./bin/notify.js gitmark:${newtx}:0`)
    }
  }
}
